{"version":3,"sources":["spaceX.png","component/LaunchItem.js","component/Launches.js","component/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","style","color","dist_default","format","Link","to","concat","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","callTwilio","BrowserRouter","src","spaceX","alt","width","margin","display","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b12f0bbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceX.ab10d000.png\";","import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success }}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n          <div className=\"col-md-9\">\n            <h4>Mission: <span style={{ color: launch_success ? \"green\" : \"red\" }}>{ mission_name }</span></h4>\n            <p>Date: <Moment format={\"YYYY-MM-DD HH:mm\"}>{launch_date_local}</Moment></p>\n          </div>\n          <div className=\"col-md-3\">\n            <Link to={`launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n          </div>\n      </div>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            mission_name\n            flight_number\n            launch_date_local\n            launch_success\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Jeremiah GraphQL Project</h1>\n        <Query query={LAUNCHES_QUERY}>\n            {\n                ({ loading, error, data })=>{\n                    if(loading) return <h4>Loading...</h4>\n                    if (error) console.log(error);\n                    console.log(data);\n                    return <Fragment>\n                        {\n                            data.launches.map((launch)=>{\n                                return <LaunchItem key={launch.flight_number} launch={launch} />\n                            })\n                        }\n                    </Fragment>\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!){\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n  render() {\n      let { flight_number } = this.props.match.params;\n      flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launch Details</h1>\n        <h4 className=\"display-4 my-3\">Jerry's GraphQL...</h4>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n            {\n                ({ loading, error, data })=>{\n                    if(loading) return <h4>Loading...</h4>\n                    if (error) console.log(error);\n                    console.log(data);\n                    const { mission_name, flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type }} = data.launch;\n                    return <Fragment>\n                        <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission: </span>{mission_name}</h1>\n                        <h4 className=\"mb-3\">Launch Details</h4>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">\n                                Flight Number: {flight_number}\n                            </li>\n                            <li className=\"list-group-item\">\n                                Launch Year: {launch_year}\n                            </li>\n                            <li className=\"list-group-item\" >\n                                Launch Successful: <span style={{ color: launch_success ? \"green\" : \"red\" }}>{launch_success? \"Yes\" : \"No\"}</span>\n                            </li>\n                            <li className=\"list-group-item\">\n                                Rocket Id: {rocket_id}\n                            </li>\n                            <li className=\"list-group-item\">\n                                Rocket Name: {rocket_name}\n                            </li>\n                            <li className=\"list-group-item\">\n                                Rocket Type: {rocket_type}\n                            </li>\n                        </ul>\n                        <hr />\n                        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                    </Fragment>\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch;","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './component/Launches';\nimport Launch from './component/Launch';\nimport './App.css';\nimport spaceX from './spaceX.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n\n  callTwilio = () => {\n    \n  }\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img src={spaceX} alt=\"SpaceX\" style={{ width: 300, margin: \"auto\", display: \"block\" }} />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}